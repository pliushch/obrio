{"version":3,"sources":["redux/const/index.ts","redux/reducers/planets.ts","redux/reducers/details.ts","redux/reducers/rootReducer.ts","redux/store.ts","helpers/getId.ts","services/swapi.ts","redux/actions/planets.ts","components/Spinner/Spinner.tsx","components/PlanetsList/Planet/Planet.tsx","components/Header/Header.tsx","components/ErrorIndicator/ErrorIndicator.tsx","components/PlanetsList/PlanetsList.tsx","redux/actions/details.ts","components/PersonDetails/PersonDetails.tsx","components/PlanetDetails/PlanetDetails.tsx","components/ErrorBoundary/ErrorBoundary.tsx","components/App/App.tsx","index.tsx"],"names":["FETCH_PLANETS_REQUESTED","FETCH_PLANETS_SUCCESS","FETCH_PLANETS_FAILURE","FETCH_PLANET_INFO_REQUESTED","FETCH_PLANET_INFO_SUCCESS","FETCH_PLANET_INFO_FAILURE","FETCH_PERSON_INFO_SUCCESS","initialState","loading","error","planetsList","count","next","planetsReducer","state","action","type","info","results","planetInfo","personList","rootReducer","combineReducers","planets","details","store","createStore","composeWithDevTools","applyMiddleware","thunk","getId","url","id","match","getPlanets","a","axios","get","data","map","_transformPlanet","getPlanetInfo","getPersonInfo","getPersonImage","planet","name","climate","population","planetsRequested","planetsLoaded","planetsFailure","fetchPlanets","dispatch","useStyles","makeStyles","root","display","width","textAlign","Spinner","classes","className","CircularProgress","color","cursor","Planet","handlePlanetClick","Grid","item","xs","onClick","Card","CardContent","Typography","Header","useSelector","pageCount","length","AppBar","position","Toolbar","variant","flexDirection","alignItems","text","fontSize","ErrorIndicator","button","marginTop","PlanetsList","history","useHistory","useDispatch","push","container","spacing","key","Button","personInfoLoaded","PersonDetails","person","gender","height","mass","src","image","alt","margin","prop","fontWeight","textTransform","list","PlanetDetails","pathname","useLocation","useEffect","Promise","all","residents","config","personInfo","useState","setPersonInfo","isModalVisible","setModalVisible","handleClick","prev","rotation_period","diameter","gravity","terrain","component","Dialog","onClose","open","ErrorBoundary","hasError","this","setState","props","children","Component","App","exact","path","render","ReactDOM","basename","document","getElementById"],"mappings":"0LAAaA,EAA0B,0BAC1BC,EAAwB,wBACxBC,EAAwB,wBAExBC,EAA8B,8BAC9BC,EAA4B,4BAC5BC,EAA4B,4BAC5BC,EAA4B,4BCAnCC,EAAe,CACnBC,SAAS,EACTC,OAAO,EACPC,YAAa,GACbC,MAAO,EACPC,KAAM,MAqCOC,EAhCQ,WAGH,IAFlBC,EAEiB,uDAFTP,EACRQ,EACiB,uCACjB,OAAQA,EAAOC,MACb,KAAKhB,EACH,OAAO,2BACFc,GADL,IAEEN,SAAS,EACTC,OAAO,IAEX,KAAKR,EAAL,MACmCc,EAAOE,KAAhCN,EADV,EACUA,MAAOC,EADjB,EACiBA,KAAMM,EADvB,EACuBA,QACrB,OAAO,2BACFJ,GADL,IAEEN,SAAS,EACTE,YAAY,GAAD,mBAAMI,EAAMJ,aAAZ,YAA4BQ,IACvCP,QACAC,OACAH,OAAO,IAEX,KAAKP,EACH,OAAO,2BACFY,GADL,IAEEN,SAAS,EACTC,OAAO,IAEX,QACE,OAAOK,ICjCPP,EAAe,CACnBC,SAAS,EACTC,OAAO,EACPU,WAAY,GACZC,WAAY,ICLCC,EAPKC,0BAAgB,CAClCC,QAASV,EACTW,QDeqB,WAGH,IAFlBV,EAEiB,uDAFTP,EACRQ,EACiB,uCACjB,OAAQA,EAAOC,MACb,KAAKb,EACH,OAAO,2BACFW,GADL,IAEEN,SAAS,EACTC,OAAO,IAEX,KAAKL,EACH,OAAO,2BACFU,GADL,IAEEN,SAAS,EACTW,WAAYJ,EAAOE,KACnBR,OAAO,IAEX,KAAKH,EACH,OAAO,2BACFQ,GADL,IAEEN,SAAS,EACTY,WAAYL,EAAOE,KACnBR,OAAO,IAEX,KAAKJ,EACH,OAAO,2BACFS,GADL,IAEEN,SAAS,EACTC,OAAO,IAEX,QACE,OAAOK,ME3CEW,EALDC,sBACZL,EACAM,8BAAoBC,0BAAgBC,O,mECPzBC,EAAQ,SAACC,GACpB,IACMC,EAA8BD,EAAIE,MADvB,iBAEjB,OAAOD,EAAKA,EAAG,GAAK,MCATE,EAAU,uCAAG,WAAOH,GAAP,iBAAAI,EAAA,sEACDC,IAAMC,IAAIN,GADT,uBAChBO,EADgB,EAChBA,KADgB,6CAGnBA,GAHmB,IAItBpB,QAASoB,EAAKpB,QAAQqB,IAAIC,MAJJ,2CAAH,sDAQVC,EAAa,uCAAG,WAAOT,GAAP,SAAAG,EAAA,sEACdC,IAAMC,IAAN,uCAA0CL,EAA1C,MADc,mFAAH,sDAIbU,EAAa,uCAAG,WAAOX,GAAP,SAAAI,EAAA,sEACdC,IAAMC,IAAIN,GADI,mFAAH,sDAIbY,EAAc,uCAAG,WAAOX,GAAP,SAAAG,EAAA,sEACfC,IAAMC,IAAN,iEAC+CL,EAD/C,SADe,mFAAH,sDAMrBQ,EAAmB,SAACI,GAAD,MAKlB,CACLZ,GAAIF,EAAMc,EAAOb,KACjBc,KAAMD,EAAOC,KACbC,QAASF,EAAOE,QAChBC,WAAYH,EAAOG,aCjBfC,EAAmB,iBAAgC,CACvDhC,KAAMhB,IAGFiD,EAAgB,SAAChC,GAAD,MAAgD,CACpED,KAAMf,EACNgB,SAGIiC,EAAiB,iBAA8B,CACnDlC,KAAMd,IAWKiD,EAAe,eAC1BpB,EAD0B,uDACpB,iCADoB,8CAEZ,WAAOqB,GAAP,eAAAjB,EAAA,6DACdiB,EAASJ,KADK,kBAGOd,EAAWH,GAHlB,OAGNO,EAHM,OAIZc,EAASH,EAAcX,IAJX,gDAMZc,EAASF,KANG,yDAFY,uD,yBClCtBG,EAAYC,YAAW,CAC3BC,KAAM,CACJC,QAAS,QACTC,MAAO,OACPC,UAAW,YAaAC,EATC,WACd,IAAMC,EAAUP,IAChB,OACE,qBAAKQ,UAAWD,EAAQL,KAAxB,SACE,cAACO,EAAA,EAAD,CAAkBC,MAAM,e,2BCPxBV,EAAYC,YAAW,CAC3BC,KAAM,CACJS,OAAQ,UACRN,UAAW,YA4BAO,EAxBA,SAAC,GAMD,IALbpB,EAKY,EALZA,KACAE,EAIY,EAJZA,WACAD,EAGY,EAHZA,QACAoB,EAEY,EAFZA,kBACAlC,EACY,EADZA,GAEM4B,EAAUP,IAIhB,OACE,cAACc,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAHA,kBAAMJ,EAAkBlC,IAG1C,SACE,cAACuC,EAAA,EAAD,CAAMV,UAAWD,EAAQL,KAAzB,SACE,eAACiB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,oBAAmB5B,KACnB,eAAC4B,EAAA,EAAD,uBAAsB3B,KACtB,eAAC2B,EAAA,EAAD,0BAAyB1B,a,mBCRpB2B,GApBA,WAAO,IAAD,EACYC,aAC7B,SAAC7D,GAAD,OAA4BA,EAAMS,WAG9BqD,GALa,EACXjE,MADW,EACJD,YAIwBmE,QAAU,GACjD,OACE,qCACE,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACE,cAACC,GAAA,EAAD,UACE,cAACP,EAAA,EAAD,CAAYQ,QAAQ,KAApB,SACGL,EAAS,UAAMA,EAAN,eAA+B,sBAI/C,cAACI,GAAA,EAAD,QCjBA3B,GAAYC,YAAW,CAC3BC,KAAM,CACJE,MAAO,OACPD,QAAS,OACT0B,cAAe,SACfC,WAAY,SACZpB,MAAO,WAETqB,KAAM,CACJC,SAAU,YAeCC,GAXQ,WACrB,IAAM1B,EAAUP,KAChB,OACE,sBAAKQ,UAAWD,EAAQL,KAAxB,UACE,sBAAMM,UAAWD,EAAQwB,KAAzB,mBACA,qEACA,8ECVA/B,GAAYC,YAAW,CAC3BiC,OAAQ,CACNC,UAAW,UAwDAC,GApDK,WAClB,IAAM7B,EAAUP,KACVqC,EAAUC,cACVvC,EAAWwC,cAHO,EAKsBjB,aAC5C,SAAC7D,GAAD,OAA4BA,EAAMS,WAD5Bf,EALgB,EAKhBA,QAASC,EALO,EAKPA,MAAOC,EALA,EAKAA,YAAaE,EALb,EAKaA,KAS/BsD,EAAoB,SAAClC,GACzB0D,EAAQG,KAAK7D,IAGf,OAAIvB,EAAc,cAAC,GAAD,IAGhB,qCACE,cAAC,GAAD,IACA,cAAC0D,EAAA,EAAD,CAAM2B,WAAS,EAACC,QAAS,EAAzB,SACGrF,EAAY6B,KAAI,SAACK,GAChB,OACE,wBAAC,EAAD,2BACMA,GADN,IAEEoD,IAAKpD,EAAOZ,GACZkC,kBAAmBA,UAK1B1D,EACC,cAAC,EAAD,IAEAI,GACE,cAACqF,EAAA,EAAD,CACEpC,UAAWD,EAAQ2B,OACnBjB,QA/BU,WAClB,IAAK1D,EAAM,OAAO,EAClBwC,EAASD,EAAavC,KA8BdqE,QAAQ,YACRlB,MAAM,UAJR,2B,SCtBJmC,GAAmB,SACvBjF,GADuB,MAEM,CAC7BD,KAAMV,EACNW,S,UCfakF,GAfO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,OACvB,OAAKA,EAAOvD,KAEV,cAAC0B,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,oBAAmB2B,EAAOvD,QAC1B,eAAC4B,EAAA,EAAD,sBAAqB2B,EAAOC,UAC5B,eAAC5B,EAAA,EAAD,sBAAqB2B,EAAOE,UAC5B,eAAC7B,EAAA,EAAD,oBAAmB2B,EAAOG,QAC1B,qBAAKC,IAAKJ,EAAOK,MAAOC,IAAI,aART,MCUrBrD,GAAYC,YAAW,CAC3BC,KAAM,CACJE,MAAO,IACPkD,OAAQ,UAEVC,KAAM,CACJC,WAAY,OACZC,cAAe,aAEjBC,KAAM,CACJJ,OAAQ,GAEVP,OAAQ,CACNpC,OAAQ,UACRP,MAAO,iBAmGIuD,GA/FO,WACpB,IAAMpD,EAAUP,KACR4D,EAAaC,cAAbD,SACFvB,EAAUC,cACVvC,EAAWwC,cAJS,EAMyBjB,aACjD,SAAC7D,GAAD,OAA4BA,EAAMU,WAD5BhB,EANkB,EAMlBA,QAASC,EANS,EAMTA,MAAOU,EANE,EAMFA,WAAYC,EANV,EAMUA,WAIpC+F,qBAAU,WFMmB,IAACnF,EEL5BoB,GFK4BpB,EELHiF,EFKE,uCAA2B,WACxD7D,GADwD,mBAAAjB,EAAA,6DAGxDiB,EA/B6D,CAC7DpC,KAAMb,IA2BkD,kBAKnBsC,EAAcT,GALK,uBAKxCb,EALwC,EAK9CmB,KAL8C,SAMV8E,QAAQC,IAClDlG,EAAWmG,UAAU/E,IAArB,uCAAyB,WAAOR,GAAP,qBAAAI,EAAA,sEACQO,EAAcX,GADtB,uBACTqE,EADS,EACf9D,KADe,SAEEK,EAAeb,EAAMsE,EAAOrE,MAF9B,uBAEfwF,EAFe,EAEfA,OAFe,kBAGhB,CACL1E,KAAMuD,EAAOvD,KACbb,GAAIF,EAAMC,GACV0E,MAAOc,EAAOxF,IACdsE,OAAQD,EAAOC,OACfC,OAAQF,EAAOE,OACfC,KAAMH,EAAOG,OATQ,2CAAzB,wDAPoD,OAMhDiB,EANgD,OAoBtDpE,EA5CqE,CACvEpC,KAAMZ,EACNa,KA0C4BE,IAC1BiC,EAAS8C,GAAiBsB,IArB4B,kDAuBtDpE,EAnCuD,CACzDpC,KAAMX,IAWkD,0DAA3B,0DEJ1B,CAAC+C,EAAU6D,IAZY,MAcUQ,mBAAqB,CACvD5E,KAAM,GACNwD,OAAQ,GACRC,OAAQ,GACRC,KAAM,GACNE,MAAO,KAnBiB,oBAcnBe,EAdmB,KAcPE,EAdO,OAqBgBD,oBAAS,GArBzB,oBAqBnBE,EArBmB,KAqBHC,EArBG,KAuBpBC,EAAc,SAACL,GACnBI,GAAgB,SAACE,GAAD,OAAWA,KAC3BJ,EAAcF,IAKhB,OAAIhH,EAAgB,cAAC,EAAD,IAChBC,EAAc,cAAC,GAAD,IAGhB,qCACE,cAAC,GAAD,IACA,cAACwF,EAAA,EAAD,CAAQhB,QAAQ,YAAYlB,MAAM,YAAYO,QARnC,kBAAMoB,EAAQG,KAAK,MAQ9B,qBAGA,cAACtB,EAAA,EAAD,CAAMV,UAAWD,EAAQL,KAAzB,SACE,eAACiB,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,sBAAMZ,UAAWD,EAAQgD,KAAzB,mBACCzF,EAAW0B,QAEd,eAAC4B,EAAA,EAAD,WACE,sBAAMZ,UAAWD,EAAQgD,KAAzB,8BACCzF,EAAW4G,mBAEd,eAACtD,EAAA,EAAD,WACE,sBAAMZ,UAAWD,EAAQgD,KAAzB,uBACCzF,EAAW6G,YAEd,eAACvD,EAAA,EAAD,WACE,sBAAMZ,UAAWD,EAAQgD,KAAzB,sBACCzF,EAAW2B,WAEd,eAAC2B,EAAA,EAAD,WACE,sBAAMZ,UAAWD,EAAQgD,KAAzB,sBACCzF,EAAW8G,WAEd,eAACxD,EAAA,EAAD,WACE,sBAAMZ,UAAWD,EAAQgD,KAAzB,sBACCzF,EAAW+G,WAEd,eAACzD,EAAA,EAAD,WACE,sBAAMZ,UAAWD,EAAQgD,KAAzB,yBACCzF,EAAW4B,cAEd,eAAC0B,EAAA,EAAD,CAAY0D,UAAU,MAAtB,UACE,sBAAMtE,UAAWD,EAAQgD,KAAzB,wBACCxF,EAAWyD,OAAS,EACnB,oBAAIhB,UAAWD,EAAQmD,KAAvB,SACG3F,EAAWmB,KAAI,SAAC6D,GAAD,OACd,oBACEvC,UAAWD,EAAQwC,OAEnB9B,QAAS,kBAAMuD,EAAYzB,IAH7B,SAKGA,EAAOvD,MAHHuD,EAAOvD,WAQlB,YAKR,cAACuF,GAAA,EAAD,CAAQC,QAASR,EAAaS,KAAMX,EAApC,SACE,cAAC,GAAD,CAAevB,OAAQoB,U,oCC5HVe,G,+MACnBzH,MAAQ,CACN0H,UAAU,G,wDAGZ,WACEC,KAAKC,SAAS,CACZF,UAAU,M,oBAId,WACE,OAAIC,KAAK3H,MAAM0H,SACN,cAAC,GAAD,IAGFC,KAAKE,MAAMC,a,GAhBqBC,aCuB5BC,GAlBH,WACV,IAAM1F,EAAWwC,cAMjB,OAJAuB,qBAAU,WACR/D,EAASD,OACR,CAACC,IAGF,cAAC,GAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2F,OAAK,EAACC,KAAK,IAAIb,UAAW1C,KACjC,cAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,OAAOb,UAAWnB,KACpC,cAAC,IAAD,CAAOiC,OAAQ,kBAAM,yDCb7BC,IAASD,OACP,cAAC,IAAD,CAAUxH,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAQ0H,SAAS,SAAjB,SACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.c3cd1761.chunk.js","sourcesContent":["export const FETCH_PLANETS_REQUESTED = \"FETCH_PLANETS_REQUESTED\";\r\nexport const FETCH_PLANETS_SUCCESS = \"FETCH_PLANETS_SUCCESS\";\r\nexport const FETCH_PLANETS_FAILURE = \"FETCH_PLANETS_FAILURE\";\r\n\r\nexport const FETCH_PLANET_INFO_REQUESTED = \"FETCH_PLANET_INFO_REQUESTED\";\r\nexport const FETCH_PLANET_INFO_SUCCESS = \"FETCH_PLANET_INFO_SUCCESS\";\r\nexport const FETCH_PLANET_INFO_FAILURE = \"FETCH_PLANET_INFO_FAILURE\";\r\nexport const FETCH_PERSON_INFO_SUCCESS = \"FETCH_PERSON_INFO_SUCCESS\";\r\n","import {\r\n  FETCH_PLANETS_FAILURE,\r\n  FETCH_PLANETS_REQUESTED,\r\n  FETCH_PLANETS_SUCCESS,\r\n} from \"../const\";\r\nimport { IPlanetsDetails, PlanetsActionType } from \"../../types/planets\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: false,\r\n  planetsList: [] as Array<IPlanetsDetails>,\r\n  count: 0,\r\n  next: null as string | null,\r\n};\r\n\r\ntype InitialState = typeof initialState;\r\n\r\nconst planetsReducer = (\r\n  state = initialState,\r\n  action: PlanetsActionType\r\n): InitialState => {\r\n  switch (action.type) {\r\n    case FETCH_PLANETS_REQUESTED:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    case FETCH_PLANETS_SUCCESS:\r\n      const { count, next, results } = action.info;\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        planetsList: [...state.planetsList, ...results],\r\n        count,\r\n        next,\r\n        error: false,\r\n      };\r\n    case FETCH_PLANETS_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default planetsReducer;\r\n","import {\r\n  FETCH_PERSON_INFO_SUCCESS,\r\n  FETCH_PLANET_INFO_FAILURE,\r\n  FETCH_PLANET_INFO_REQUESTED,\r\n  FETCH_PLANET_INFO_SUCCESS,\r\n} from \"../const\";\r\nimport {\r\n  PersonInfo,\r\n  PlanetInfo,\r\n  PlanetInfoActionType,\r\n} from \"../../types/details\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  error: false,\r\n  planetInfo: {} as PlanetInfo,\r\n  personList: [] as Array<PersonInfo>,\r\n};\r\n\r\ntype InitialState = typeof initialState;\r\n\r\nexport const details = (\r\n  state = initialState,\r\n  action: PlanetInfoActionType\r\n): InitialState => {\r\n  switch (action.type) {\r\n    case FETCH_PLANET_INFO_REQUESTED:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n      };\r\n    case FETCH_PLANET_INFO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        planetInfo: action.info,\r\n        error: false,\r\n      };\r\n    case FETCH_PERSON_INFO_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        personList: action.info,\r\n        error: false,\r\n      };\r\n    case FETCH_PLANET_INFO_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport planetsReducer from \"./planets\";\r\nimport { details } from \"./details\";\r\n\r\nconst rootReducer = combineReducers({\r\n  planets: planetsReducer,\r\n  details,\r\n});\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","export const getId = (url: string) => {\r\n  const idRegExp = /\\/([0-9]*)\\/$/;\r\n  const id: RegExpMatchArray | null = url.match(idRegExp);\r\n  return id ? id[1] : null;\r\n};\r\n","import axios from \"axios\";\r\nimport { getId } from \"../helpers/getId\";\r\n\r\nexport const getPlanets = async (url: string) => {\r\n  const { data } = await axios.get(url);\r\n  return {\r\n    ...data,\r\n    results: data.results.map(_transformPlanet),\r\n  };\r\n};\r\n\r\nexport const getPlanetInfo = async (id: string) => {\r\n  return await axios.get(`https://swapi.dev/api/planets${id}/`);\r\n};\r\n\r\nexport const getPersonInfo = async (url: string) => {\r\n  return await axios.get(url);\r\n};\r\n\r\nexport const getPersonImage = async (id: string | null) => {\r\n  return await axios.get(\r\n    `https://starwars-visualguide.com/assets/img/characters/${id}.jpg`\r\n  );\r\n};\r\n\r\nconst _transformPlanet = (planet: {\r\n  url: string;\r\n  name: string;\r\n  climate: string;\r\n  population: string;\r\n}) => ({\r\n  id: getId(planet.url),\r\n  name: planet.name,\r\n  climate: planet.climate,\r\n  population: planet.population,\r\n});\r\n","import {\r\n  FETCH_PLANETS_FAILURE,\r\n  FETCH_PLANETS_REQUESTED,\r\n  FETCH_PLANETS_SUCCESS,\r\n} from \"../const\";\r\nimport { getPlanets } from \"../../services/swapi\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { RootReducerType } from \"../reducers/rootReducer\";\r\nimport {\r\n  PlanetsActionType,\r\n  TPlanetsFailureAction,\r\n  TPlanetsInfo,\r\n  TPlanetsRequestedAction,\r\n  TPlanetsSuccessAction,\r\n} from \"../../types/planets\";\r\n\r\nconst planetsRequested = (): TPlanetsRequestedAction => ({\r\n  type: FETCH_PLANETS_REQUESTED,\r\n});\r\n\r\nconst planetsLoaded = (info: TPlanetsInfo): TPlanetsSuccessAction => ({\r\n  type: FETCH_PLANETS_SUCCESS,\r\n  info,\r\n});\r\n\r\nconst planetsFailure = (): TPlanetsFailureAction => ({\r\n  type: FETCH_PLANETS_FAILURE,\r\n});\r\n\r\ntype DispatchType = Dispatch<PlanetsActionType>;\r\ntype ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  RootReducerType,\r\n  unknown,\r\n  PlanetsActionType\r\n>;\r\n\r\nexport const fetchPlanets = (\r\n  url = \"https://swapi.dev/api/planets/\"\r\n): ThunkType => async (dispatch: DispatchType) => {\r\n  dispatch(planetsRequested());\r\n  try {\r\n    const data = await getPlanets(url);\r\n    dispatch(planetsLoaded(data));\r\n  } catch (e) {\r\n    dispatch(planetsFailure());\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"block\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nconst Spinner = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress color=\"primary\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { IPlanetsDetails } from \"../../../types/planets\";\n\ninterface IProps extends IPlanetsDetails {\n  handlePlanetClick: (id: string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    cursor: \"pointer\",\n    textAlign: \"center\",\n  },\n});\n\nconst Planet = ({\n  name,\n  population,\n  climate,\n  handlePlanetClick,\n  id,\n}: IProps) => {\n  const classes = useStyles();\n\n  const handleClick = () => handlePlanetClick(id);\n\n  return (\n    <Grid item xs={3} onClick={handleClick}>\n      <Card className={classes.root}>\n        <CardContent>\n          <Typography>Name: {name}</Typography>\n          <Typography>Climate: {climate}</Typography>\n          <Typography>Population: {population}</Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default Planet;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootReducerType } from \"../../redux/reducers/rootReducer\";\nimport { Toolbar, Typography, AppBar } from \"@material-ui/core\";\n\nconst Header = () => {\n  const { count, planetsList } = useSelector(\n    (state: RootReducerType) => state.planets\n  );\n\n  const pageCount = (count - planetsList.length) / 10;\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            {pageCount ? `${pageCount} pages left` : \"no more pages\"}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    color: \"#c78f22\",\n  },\n  text: {\n    fontSize: \"1.7rem\",\n  },\n});\n\nconst ErrorIndicator = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <span className={classes.text}>BOOM!</span>\n      <span>something has gone terribly wrong</span>\n      <span>(but we already sent droids to fix it)</span>\n    </div>\n  );\n};\n\nexport default ErrorIndicator;\n","import { Button, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchPlanets } from \"../../redux/actions/planets\";\nimport { RootReducerType } from \"../../redux/reducers/rootReducer\";\nimport Spinner from \"../Spinner/Spinner\";\nimport Planet from \"./Planet/Planet\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../Header/Header\";\nimport ErrorIndicator from \"../ErrorIndicator/ErrorIndicator\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  button: {\n    marginTop: \"10px\",\n  },\n});\n\nconst PlanetsList = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const { loading, error, planetsList, next } = useSelector(\n    (state: RootReducerType) => state.planets\n  );\n\n  const handleClick = () => {\n    if (!next) return false;\n    dispatch(fetchPlanets(next));\n  };\n\n  const handlePlanetClick = (id: any) => {\n    history.push(id);\n  };\n\n  if (error) return <ErrorIndicator />;\n\n  return (\n    <>\n      <Header />\n      <Grid container spacing={2}>\n        {planetsList.map((planet) => {\n          return (\n            <Planet\n              {...planet}\n              key={planet.id}\n              handlePlanetClick={handlePlanetClick}\n            />\n          );\n        })}\n      </Grid>\n      {loading ? (\n        <Spinner />\n      ) : (\n        next && (\n          <Button\n            className={classes.button}\n            onClick={handleClick}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Load more\n          </Button>\n        )\n      )}\n    </>\n  );\n};\n\nexport default PlanetsList;\n","import {\r\n  FETCH_PERSON_INFO_SUCCESS,\r\n  FETCH_PLANET_INFO_FAILURE,\r\n  FETCH_PLANET_INFO_REQUESTED,\r\n  FETCH_PLANET_INFO_SUCCESS,\r\n} from \"../const\";\r\nimport {\r\n  getPersonImage,\r\n  getPersonInfo,\r\n  getPlanetInfo,\r\n} from \"../../services/swapi\";\r\nimport { RootReducerType } from \"../reducers/rootReducer\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { getId } from \"../../helpers/getId\";\r\nimport {\r\n  PersonInfo,\r\n  PlanetInfo,\r\n  PlanetInfoActionType,\r\n  TPersonInfoLoadedAction,\r\n  TPlanetInfoLoadedAction,\r\n  TPlanetInfoLoadedFailure,\r\n  TPlanetInfoRequestedAction,\r\n} from \"../../types/details\";\r\n\r\nconst planetInfoRequested = (): TPlanetInfoRequestedAction => ({\r\n  type: FETCH_PLANET_INFO_REQUESTED,\r\n});\r\n\r\nconst planetInfoLoaded = (info: PlanetInfo): TPlanetInfoLoadedAction => ({\r\n  type: FETCH_PLANET_INFO_SUCCESS,\r\n  info,\r\n});\r\n\r\nconst personInfoLoaded = (\r\n  info: Array<PersonInfo>\r\n): TPersonInfoLoadedAction => ({\r\n  type: FETCH_PERSON_INFO_SUCCESS,\r\n  info,\r\n});\r\n\r\nconst planetInfoFailure = (): TPlanetInfoLoadedFailure => ({\r\n  type: FETCH_PLANET_INFO_FAILURE,\r\n});\r\n\r\ntype DispatchType = Dispatch<PlanetInfoActionType>;\r\ntype ThunkType = ThunkAction<\r\n  Promise<void>,\r\n  RootReducerType,\r\n  unknown,\r\n  PlanetInfoActionType\r\n>;\r\n\r\nexport const fetchPlanetInfo = (id: string): ThunkType => async (\r\n  dispatch: DispatchType\r\n) => {\r\n  dispatch(planetInfoRequested());\r\n  try {\r\n    const { data: planetInfo } = await getPlanetInfo(id);\r\n    const personInfo: Array<PersonInfo> = await Promise.all(\r\n      planetInfo.residents.map(async (url: any) => {\r\n        const { data: person } = await getPersonInfo(url);\r\n        const { config } = await getPersonImage(getId(person.url));\r\n        return {\r\n          name: person.name,\r\n          id: getId(url),\r\n          image: config.url,\r\n          gender: person.gender,\r\n          height: person.height,\r\n          mass: person.mass,\r\n        };\r\n      })\r\n    );\r\n    dispatch(planetInfoLoaded(planetInfo));\r\n    dispatch(personInfoLoaded(personInfo));\r\n  } catch (e) {\r\n    dispatch(planetInfoFailure());\r\n  }\r\n};\r\n","import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { PersonInfo } from \"../../types/details\";\n\ninterface IProps {\n  person: PersonInfo;\n}\n\nconst PersonDetails = ({ person }: IProps) => {\n  if (!person.name) return null\n  return (\n    <Card>\n      <CardContent>\n        <Typography>name: {person.name}</Typography>\n        <Typography>gender: {person.gender}</Typography>\n        <Typography>height: {person.height}</Typography>\n        <Typography>mass: {person.mass}</Typography>\n        <img src={person.image} alt=\"alt\" />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PersonDetails;\n","import React, { useEffect, useState } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { fetchPlanetInfo } from \"../../redux/actions/details\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Button,\n  Card,\n  CardContent,\n  Dialog,\n  Typography,\n} from \"@material-ui/core\";\nimport { RootReducerType } from \"../../redux/reducers/rootReducer\";\nimport Spinner from \"../Spinner/Spinner\";\nimport PersonDetails from \"../PersonDetails/PersonDetails\";\nimport { PersonInfo } from \"../../types/details\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Header from \"../Header/Header\";\nimport ErrorIndicator from \"../ErrorIndicator/ErrorIndicator\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 350,\n    margin: \"0 auto\",\n  },\n  prop: {\n    fontWeight: \"bold\",\n    textTransform: \"uppercase\",\n  },\n  list: {\n    margin: 0,\n  },\n  person: {\n    cursor: \"pointer\",\n    width: \"fit-content\",\n  },\n});\n\nconst PlanetDetails = () => {\n  const classes = useStyles();\n  const { pathname } = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const { loading, error, planetInfo, personList } = useSelector(\n    (state: RootReducerType) => state.details\n  );\n\n  useEffect(() => {\n    dispatch(fetchPlanetInfo(pathname));\n  }, [dispatch, pathname]);\n\n  const [personInfo, setPersonInfo] = useState<PersonInfo>({\n    name: \"\",\n    gender: \"\",\n    height: \"\",\n    mass: \"\",\n    image: \"\",\n  });\n  const [isModalVisible, setModalVisible] = useState(false);\n\n  const handleClick = (personInfo: PersonInfo) => {\n    setModalVisible((prev) => !prev);\n    setPersonInfo(personInfo);\n  };\n\n  const goBack = () => history.push(\"/\");\n\n  if (loading) return <Spinner />;\n  if (error) return <ErrorIndicator />;\n\n  return (\n    <>\n      <Header />\n      <Button variant=\"contained\" color=\"secondary\" onClick={goBack}>\n        go back\n      </Button>\n      <Card className={classes.root}>\n        <CardContent>\n          <Typography>\n            <span className={classes.prop}>name:</span>\n            {planetInfo.name}\n          </Typography>\n          <Typography>\n            <span className={classes.prop}>rotation period:</span>\n            {planetInfo.rotation_period}\n          </Typography>\n          <Typography>\n            <span className={classes.prop}>diameter:</span>\n            {planetInfo.diameter}\n          </Typography>\n          <Typography>\n            <span className={classes.prop}>climate:</span>\n            {planetInfo.climate}\n          </Typography>\n          <Typography>\n            <span className={classes.prop}>gravity:</span>\n            {planetInfo.gravity}\n          </Typography>\n          <Typography>\n            <span className={classes.prop}>terrain:</span>\n            {planetInfo.terrain}\n          </Typography>\n          <Typography>\n            <span className={classes.prop}>population:</span>\n            {planetInfo.population}\n          </Typography>\n          <Typography component=\"div\">\n            <span className={classes.prop}>residents:</span>\n            {personList.length > 0 ? (\n              <ul className={classes.list}>\n                {personList.map((person) => (\n                  <li\n                    className={classes.person}\n                    key={person.name}\n                    onClick={() => handleClick(person)}\n                  >\n                    {person.name}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              \"-\"\n            )}\n          </Typography>\n        </CardContent>\n      </Card>\n      <Dialog onClose={handleClick} open={isModalVisible}>\n        <PersonDetails person={personInfo} />\n      </Dialog>\n    </>\n  );\n};\nexport default PlanetDetails;\n","import React, { Component } from \"react\";\nimport ErrorIndicator from \"../ErrorIndicator/ErrorIndicator\";\n\nexport default class ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n\n  componentDidCatch() {\n    this.setState({\n      hasError: true,\n    });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />;\n    }\n\n    return this.props.children;\n  }\n}\n","import React, { useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport PlanetsList from \"../PlanetsList/PlanetsList\";\nimport PlanetDetails from \"../PlanetDetails/PlanetDetails\";\nimport { fetchPlanets } from \"../../redux/actions/planets\";\nimport { useDispatch } from \"react-redux\";\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPlanets());\n  }, [dispatch]);\n\n  return (\n    <ErrorBoundary>\n      <Switch>\n        <Route exact path=\"/\" component={PlanetsList} />\n        <Route exact path=\"/:id\" component={PlanetDetails} />\n        <Route render={() => <h1>Page not found</h1>} />\n      </Switch>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport store from \"./redux/store\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router basename=\"/obrio\">\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}